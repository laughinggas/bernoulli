import number_theory.bernoulli_polynomials

open finset polynomial power_series
open_locale big_operators nat

local notation `ùîπ` := polynomial.bernoulli
local notation `psm` := power_series.mk

-- Today's aim:   to prove this
-- Bernoulli polynomials multiplication theorem :
--  For k ‚â• 1, B_m(k*x) = k^{m - 1} ‚àë i in range k, B_m (x + i / k).

-- nontrivial R comes for free but I cba
theorem exp_ne_constant {R} [ring R] [nontrivial R] [algebra ‚Ñö R] (a : R) : exp R ‚â† a ‚Ä¢ 1 :=
Œª h, by simpa using power_series.ext_iff.mp h 1

theorem rescale_ne_constant {R} [comm_semiring R] [no_zero_divisors R]
  (s : power_series R) {a : R} (ha : a ‚â† 0) (b : R) (hc : ‚àÄ a : R, s ‚â† a ‚Ä¢ 1) :
  rescale a s ‚â† b ‚Ä¢ 1 := Œª h, hc b
begin
  ext (-|t),
  simpa using power_series.ext_iff.mp h 0,
  simpa [ha] using power_series.ext_iff.mp h t.succ
end

theorem bernoulli_eval_mul (m : ‚Ñï) {k : ‚Ñï} (hk : k ‚â† 0) (y : ‚Ñö) :
  (polynomial.bernoulli m).eval ((k : ‚Ñö) * y) =
  k^(m - 1 : ‚Ñ§) * ‚àë i in finset.range k, (polynomial.bernoulli m).eval (y + i / k) :=
begin
-- why is k ‚â† 0 needed?
-- Step 1 : it suffices to prove that :
-- ‚àë_{j = 0}^‚àû k^{j - 1} / j! B_j (‚àë_{i = 0}^{k - 1} (X + i/k)) X^j * (e^X - 1) * (e^{kX} - 1) = (‚àë_{j = 0}^‚àû B_j(kx)/j! * X^j) * (e^X - 1) * (e^{kX} - 1)
-- Note that you will need to use `power_series.mk` for this
-- You might want to look through the `power_series` library well
-- You might also want to look at `rescale` and `exp`
-- Another helpful lemma might be `bernoulli_generating_function`

  suffices : psm (Œª j, ((k : ‚Ñö) ^ (j - 1 : ‚Ñ§) / j!) * ‚àë i in range k, (ùîπ m).eval (y + i / k)) * (exp ‚Ñö - 1) * (rescale ‚Üëk (exp ‚Ñö) - 1) =
             psm (Œª j, aeval (‚Üëk * y) ((1 / j! : ‚Ñö) ‚Ä¢ bernoulli j)) * (exp ‚Ñö - 1) * (rescale ‚Üëk (exp ‚Ñö) - 1),
  sorry{ replace := mul_right_cancel‚ÇÄ _ (mul_right_cancel‚ÇÄ _ this),
    have hm : (m! : ‚Ñö) ‚â† 0 := by exact_mod_cast m.factorial_ne_zero,
    replace := power_series.ext_iff.mp this m,
    simp only [coeff_mk, one_div, coe_aeval_eq_eval, eval_smul,
               algebra.id.smul_eq_mul, eq_inv_mul_iff_mul_eq‚ÇÄ hm] at this,
    rw [‚Üêthis, ‚Üêmul_assoc (m! : ‚Ñö), ‚Üêmul_div_assoc, mul_div_cancel_left _ hm],
    all_goals { rw sub_ne_zero },
    { convert exp_ne_constant (1 : ‚Ñö),
      simp },
    { convert rescale_ne_constant _ _ _ _,
      exact (one_smul _ 1).symm,
      apply_instance,
      exact_mod_cast hk,
      exact exp_ne_constant } },

end
